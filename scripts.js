// Telegram Bot configuration (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
const TELEGRAM_BOT_TOKEN = "7524644623:AAE6YasVXvYnnNH-xrbSH_odIHEqD_b15oo"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002695033602"; // ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç ID)

// Function to send message to Telegram Bot
async function sendToTelegram(message) {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    try {
        await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: "HTML", // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }),
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
    }
}

// Form submission with Telegram integration (using capture phase to run before inline handler)
document.addEventListener(
    "submit",
    async function (e) {
        if (e.target.tagName !== "FORM") return;

        const form = e.target;
        e.preventDefault(); // Prevent default form submission

        try {
            // Collect form data manually by IDs (since no 'name' attributes in HTML)
            const modalType = form.id.replace("-form", "");
            let name = "",
                phone = "",
                email = "",
                message = "";
            let analysisObject = "",
                analysisArea = "",
                analysisLocation = "",
                analysisCondition = "";
            let brokersCompany = "";

            if (modalType === "consultation") {
                const nameEl = document.getElementById("consult-name");
                const phoneEl = document.getElementById("consult-phone");
                const emailEl = document.getElementById("consult-email");
                const messageEl = document.getElementById("consult-message");
                name = nameEl ? nameEl.value : "";
                phone = phoneEl ? phoneEl.value : "";
                email = emailEl ? emailEl.value : "";
                message = messageEl ? messageEl.value : "";
            } else {
                const nameEl = document.getElementById(`${modalType}-name`);
                const phoneEl = document.getElementById(`${modalType}-phone`);
                const emailEl = document.getElementById(`${modalType}-email`);
                const messageEl = document.getElementById(
                    `${modalType}-message`
                );
                name = nameEl ? nameEl.value : "";
                phone = phoneEl ? phoneEl.value : "";
                email = emailEl ? emailEl.value : "";
                message = messageEl ? messageEl.value : "";
            }

            if (modalType === "analysis") {
                const objEl = document.getElementById("analysis-object");
                const areaEl = document.getElementById("analysis-area");
                const locEl = document.getElementById("analysis-location");
                const condEl = document.getElementById("analysis-condition");
                analysisObject = objEl ? objEl.value : "";
                analysisArea = areaEl ? areaEl.value : "";
                analysisLocation = locEl ? locEl.value : "";
                analysisCondition = condEl ? condEl.value : "";
            } else if (modalType === "brokers") {
                const compEl = document.getElementById("brokers-company");
                brokersCompany = compEl ? compEl.value : "";
            }

            // Format message based on form type
            let telegramMessage = `üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${modalType.toUpperCase()}</b>\n\n`;
            telegramMessage += `üë§ –ò–º—è: ${name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
            telegramMessage += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
            telegramMessage += `‚úâÔ∏è Email: ${email || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;

            if (modalType === "analysis") {
                telegramMessage += `üè¢ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: ${
                    analysisObject || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }\n`;
                telegramMessage += `üìè –ü–ª–æ—â–∞–¥—å: ${
                    analysisArea || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                } –º¬≤\n`;
                telegramMessage += `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${
                    analysisLocation || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }\n`;
                telegramMessage += `üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${
                    analysisCondition || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }\n`;
            } else if (modalType === "brokers") {
                telegramMessage += `üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${
                    brokersCompany || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }\n`;
            }

            telegramMessage += `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;
            telegramMessage += `\n‚è∞ –î–∞—Ç–∞/–≤—Ä–µ–º—è: ${new Date().toLocaleString(
                "ru-RU"
            )}`;

            // Send to Telegram
            await sendToTelegram(telegramMessage);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ä–º—ã:", error);
        }
        // Do not reset or close here - let the inline handler do it after this capture-phase handler
    },
    true
); // Capture phase to run BEFORE the inline bubble-phase handler

// Initialize
document.addEventListener("DOMContentLoaded", function () {
    updateCasesDisplay();

    // Responsive adjustments - show one on all sizes
    function handleResize() {
        updateCasesDisplay();
    }

    window.addEventListener("resize", handleResize);
    handleResize();
});

// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const targetId = this.getAttribute("href");
        if (targetId === "#") return;

        const targetElement = document.querySelector(targetId);
        if (targetElement) {
            window.scrollTo({
                top: targetElement.offsetTop - 80,
                behavior: "smooth",
            });
        }
    });
});
